<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.init.mybatis_4.dao.EmployeeMapperDynamicSQL">
    <select id="getEmpsByCondtionIf" resultType="com.init.mybatis_4.bean.Employee">
        select * from tbl_employee
        <where>
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null and lastName!=''">
                and last_name like CONCAT(CONCAT('%', #{lastName}), '%')
            </if>
            <if test="email!=null and email.trim()!=''">
                and email like "%"#{email}"%"
            </if>
            /*ognl会进行数字与字符串转换"0"==0*/
            <if test="gender==0 or gender==1">
                and gender=#{gender}
            </if>
        </where>
    </select>

    <select id="getEmpsByCondtionTrim" resultType="com.init.mybatis_4.bean.Employee">
        select * from tbl_employee
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null and lastName!=''">
                last_name like CONCAT(CONCAT('%',#{lastName}),'%') and
            </if>
            <if test="email!=null and email.trim()!=''">
                email like "%"#{email}"%" and
            </if>
            <if test="gender==0 or gender==1">
                gender=#{gender}
            </if>
        </trim>
    </select>

    <select id="getEmpsByCondtionChoose" resultType="com.init.mybatis_4.bean.Employee">
        select * from tbl_employee
        <where>
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null and lastName!=''">
                    and last_name like CONCAT(CONCAT('%', #{lastName}), '%')
                </when>
                <when test="email!=null and email.trim()!=''">
                    and email like "%"#{email}"%"
                </when>
                <when test="gender==0 or gender==1">
                    and gender=#{gender}
                </when>
                <otherwise>
                    gender=1
                </otherwise>
            </choose>
        </where>
    </select>

    <update id="updateEmp">
        update tbl_employee
        <set>
            <if test="lastName!=null and lastName!=''">
                last_name=#{lastName},
            </if>
            <if test="email!=null and email.trim()!=''">
                email=#{email},
            </if>
            <if test="gender==0 or gender==1">
                gender=#{gender}
            </if>
        </set>
        <!--<trim prefix="set" suffixOverrides=",">
           <if test="lastName!=null and lastName!=''">
               last_name=#{lastName},
           </if>
           <if test="email!=null and email.trim()!=''">
               email=#{email},
           </if>
           <if test="gender==0 or gender==1">
               gender=#{gender}
           </if>
        </trim>-->
        where id=#{id}
    </update>

    <select id="getEmpsByConditionForeach" resultType="com.init.mybatis_4.bean.Employee">
        <!-- collection：指定要遍历的集合：
                     list类型的参数会特殊处理封装在map中，map的key就叫list
                     item：将当前遍历出的元素赋值给指定的变量
                     separator:每个元素之间的分隔符
                     open：遍历出所有结果拼接一个开始的字符
                     close:遍历出所有结果拼接一个结束的字符
                     index:索引。遍历list的时候是index就是索引，item就是当前值
                                 遍历map的时候index表示的就是map的key，item就是map的值
                     #{变量名}就能取出变量的值也就是当前遍历出的元素
                   -->
        select * from tbl_employee where id in
        <foreach collection="ids" item="item_id" separator="," open="(" close=")">
            #{item_id}
        </foreach>
    </select>

    <insert id="addEmps">
        insert into tbl_employee(last_name,email,gender,d_id) values
        <foreach collection="employees" item="employee" separator=",">
            (#{employee.lastName},#{employee.email},#{employee.gender},#{employee.dept.id})
        </foreach>
        /*需要数据库开启allowMultiQueries=true*/
        <!--<foreach collection="employees" item="employee" separator=";">
            insert into tbl_employee(last_name,email,gender,d_id) value
            (#{employee.lastName},#{employee.email},#{employee.gender},#{employee.dept.id})
        </foreach>-->
    </insert>

    <!-- Oracle数据库批量保存：
	 	Oracle不支持values(),(),()
	 	Oracle支持的批量方式
	 	1、多个insert放在begin - end里面
	 		begin
			    insert into employees(employee_id,last_name,email)
			    values(employees_seq.nextval,'test_001','test_001@atguigu.com');
			    insert into employees(employee_id,last_name,email)
			    values(employees_seq.nextval,'test_002','test_002@atguigu.com');
			end;
		2、利用中间表：
			insert into employees(employee_id,last_name,email)
		       select employees_seq.nextval,lastName,email from(
		              select 'test_a_01' lastName,'test_a_e01' email from dual
		              union
		              select 'test_a_02' lastName,'test_a_e02' email from dual
		              union
		              select 'test_a_03' lastName,'test_a_e03' email from dual
		       )
	 -->
    <insert id="addEmps" databaseId="oracle">
        <!-- oracle第一种批量方式 -->
        <!-- <foreach collection="emps" item="emp" open="begin" close="end;">
            insert into employees(employee_id,last_name,email)
               values(employees_seq.nextval,#{emp.lastName},#{emp.email});
        </foreach> -->
        <!-- oracle第二种批量方式  -->
        insert into employees(
        <!-- 引用外部定义的sql -->
        <include refid="insertColumn">
            <property name="testColomn" value="abc"/>
        </include>
        )
        <foreach collection="emps" item="emp" separator="union"
                 open="select employees_seq.nextval,lastName,email from("
                 close=")">
            select #{emp.lastName} lastName,#{emp.email} email from dual
        </foreach>
    </insert>

    <!-- 两个内置参数：
	 	不只是方法传递过来的参数可以被用来判断，取值。。。
	 	mybatis默认还有两个内置参数：
	 	_parameter:代表整个参数
	 		单个参数：_parameter就是这个参数
	 		多个参数：参数会被封装为一个map；_parameter就是代表这个map
	 	_databaseId:如果配置了databaseIdProvider标签。
	 		_databaseId就是代表当前数据库的别名oracle
	  -->
    <select id="getEmpsTestInnerParameter" resultType="com.init.mybatis_4.bean.Employee">
        <bind name="_lastName" value="'%'+lastName+'%'"/>
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
            <if test="_parameter!=null">
                where last_name like #{_lastName}
            </if>
        </if>
        <if test="_databaseId=='oracle'">
            select * from employees
            <if test="_parameter!=null">
                where employ_id=#{_parameter.id}
            </if>
        </if>
    </select>

    <!--
         抽取可重用的sql片段。方便后面引用
         1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用
         2、include来引用已经抽取的sql：
         3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
                 include-property：取值的正确方式${prop},
                 #{不能使用这种方式}
     -->
    <sql id="insertColumn">
        <if test="_databaseId=='oracle'">
            employee_id,last_name,email
        </if>
        <if test="_databaseId=='mysql'">
            last_name,email,gender,d_id
        </if>
    </sql>
</mapper>